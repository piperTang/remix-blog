{
  "version": 3,
  "sources": ["../../../app/routes/posts.$postId.edit.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\posts.$postId.edit.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\posts.$postId.edit.tsx\");\n  import.meta.hot.lastModified = \"1721048534171.4036\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { prisma } from \"~/prisma.server\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { Form } from \"@remix-run/react\";\nimport { Input, Textarea, Button } from \"@nextui-org/react\";\nimport { redirect } from \"@remix-run/node\";\nimport { useNavigation } from \"@remix-run/react\";\nimport { useFetcher } from \"@remix-run/react\";\nimport { auth } from \"~/session.server\";\nexport const loader = async c => {\n  const user = await auth(c.request);\n  if (!user.username) {\n    return redirect(\"/signin\");\n  }\n  const postId = c.params.postId;\n  const post = await prisma.post.findUnique({\n    where: {\n      id: postId\n    }\n  });\n  if (!post) {\n    throw new Response(\"\u627E\u4E0D\u5230\u6587\u7AE0\", {\n      status: 404\n    });\n  }\n  return json({\n    post\n  });\n};\nexport const action = async c => {\n  const postId = c.params.postId;\n  const formData = await c.request.formData();\n  const title = formData.get('title');\n  const content = formData.get('content');\n  const slug = formData.get('slug');\n  await prisma.post.update({\n    where: {\n      id: postId\n    },\n    data: {\n      id: slug,\n      title,\n      content\n    }\n  });\n  return redirect(`/posts/${slug}`);\n};\nexport default function Page() {\n  _s();\n  const loaderData = useLoaderData();\n  const navigation = useNavigation();\n  const deleteFetcher = useFetcher();\n  const isDeleting = deleteFetcher.state === 'submitting';\n  const isEditing = navigation.state === 'submitting' && navigation.formData?.get(\"action\") === 'edit';\n  return <div className=\"p-12\">\r\n      <Form method=\"POST\">\r\n        <div className=\"flex flex-col gap-3\">\r\n          <Input label=\"slug\" name=\"slug\" defaultValue={loaderData.post.id} />\r\n          <Input label=\"\u6807\u9898\" name=\"title\" defaultValue={loaderData.post.title} />\r\n          <Textarea minRows={10} label=\"\u6B63\u6587\" name=\"content\" defaultValue={loaderData.post.content} />\r\n          <Button isLoading={isEditing} type=\"submit\" color=\"primary\">\u66F4\u65B0</Button>\r\n        </div>\r\n      </Form>\r\n      <div>\r\n        <deleteFetcher.Form method=\"POST\" action={`/posts/${loaderData.post.id}/delete`}>\r\n          <Button name=\"action\" value=\"delete\" isLoading={isDeleting} type=\"submit\" onClick={_ => {\n          if (confirm(\"\u786E\u5B9A\u5220\u9664\u5417\uFF1F\")) {\n            deleteFetcher.submit(null, {\n              method: \"POST\",\n              action: `/posts/${loaderData.post.id}/delete`\n            });\n          }\n        }} color=\"danger\">\u5220\u9664</Button>\r\n        </deleteFetcher.Form>\r\n      </div>\r\n    </div>;\n}\n_s(Page, \"TgpSx+od0RvY9r7R5RmSS1PFMZY=\", false, function () {\n  return [useLoaderData, useNavigation, useFetcher];\n});\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AACrB,oBAAuB;AAIvB,IAAAA,eAAyB;AAGzB,qBAAqB;AAiDX;AA7EV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,8CAAgD,EAAE;AAAA,EAC3F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAqC;AACrC,cAAY,IAAI,eAAe;AACjC;AAkDe,SAAR,OAAwB;AAC7B,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,aAAa,cAAc;AACjC,QAAM,gBAAgB,WAAW;AACjC,QAAM,aAAa,cAAc,UAAU;AAC3C,QAAM,YAAY,WAAW,UAAU,gBAAgB,WAAW,UAAU,IAAI,QAAQ,MAAM;AAC9F,SAAO,mDAAC,SAAI,WAAU,QAClB;AAAA,uDAAC,QAAK,QAAO,QACX,6DAAC,SAAI,WAAU,uBACb;AAAA,yDAAC,iBAAM,OAAM,QAAO,MAAK,QAAO,cAAc,WAAW,KAAK,MAA9D;AAAA;AAAA;AAAA;AAAA,aAAkE;AAAA,MAClE,mDAAC,iBAAM,OAAM,gBAAK,MAAK,SAAQ,cAAc,WAAW,KAAK,SAA7D;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,mDAAC,oBAAS,SAAS,IAAI,OAAM,gBAAK,MAAK,WAAU,cAAc,WAAW,KAAK,WAA/E;AAAA;AAAA;AAAA;AAAA,aAAwF;AAAA,MACxF,mDAAC,kBAAO,WAAW,WAAW,MAAK,UAAS,OAAM,WAAU,4BAA5D;AAAA;AAAA;AAAA;AAAA,aAA8D;AAAA,SAJhE;AAAA;AAAA;AAAA;AAAA,WAKA,KANF;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,IACA,mDAAC,SACC,6DAAC,cAAc,MAAd,EAAmB,QAAO,QAAO,QAAQ,UAAU,WAAW,KAAK,aAClE,6DAAC,kBAAO,MAAK,UAAS,OAAM,UAAS,WAAW,YAAY,MAAK,UAAS,SAAS,OAAK;AACxF,UAAI,QAAQ,sCAAQ,GAAG;AACrB,sBAAc,OAAO,MAAM;AAAA,UACzB,QAAQ;AAAA,UACR,QAAQ,UAAU,WAAW,KAAK;AAAA,QACpC,CAAC;AAAA,MACH;AAAA,IACF,GAAG,OAAM,UAAS,4BAPhB;AAAA;AAAA;AAAA;AAAA,WAOkB,KARpB;AAAA;AAAA;AAAA;AAAA,WASA,KAVF;AAAA;AAAA;AAAA;AAAA,WAWA;AAAA,OApBG;AAAA;AAAA;AAAA;AAAA,SAqBL;AACJ;AACA,GAAG,MAAM,gCAAgC,OAAO,WAAY;AAC1D,SAAO,CAAC,eAAe,eAAe,UAAU;AAClD,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,MAAM;AAEvB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_node"]
}
